package org.ntukhpi.binarytree.model;

import java.util.List;
import java.util.Optional;

/**
 * Интерфейс {@code Tree} - описывает абстрактное поведение структуры данных в виде дерева.
 * <br>Позволяет проверять наличие значения в дереве, добавлять и удалять значения, искать минимум и максимум,
 * получать элементы дерева в виде списка в указанном порядке обхода ({@link Traversal}).
 * <br>Значения могут быть любого сравниваемого с самим собой типа (см. {@link Comparable})
 * <br>Дерево может быть пустым - это состояние считается допуcтимым и обладает общим поведением с непустым деревом.
 *
 * @author Alexander Gorbunov
 */
public interface Tree<T extends Comparable<T>> {

    /**
     * Добавление нового элемента в дерево.
     *
     * @param value значение элемента
     * @return новый вид дерева.
     */
    Tree<T> insert(T value);

    /**
     * Удаление элемента из дерева.
     *
     * @param value значение элемента
     * @return новый вид дерева.
     */
    Tree<T> remove(T value);

    /**
     * Удаление всех элементов из дерева.
     *
     * @return новый вид дерева.
     */
    Tree<T> clear();

    /**
     * Проверка наличия элемента в дереве.
     *
     * @param value значение искомого элемента.
     * @return результат проверки.
     */
    boolean contains(T value);

    /**
     * Поиск минимального значения.
     * Если дерево пустое, {@link Optional} должен хранить пустую ссылку (null)
     *
     * @return контейнер, который может содержать минимальное значение дерева.
     */
    Optional<T> min();

    /**
     * Поиск максимального значения.
     * Если дерево пустое, {@link Optional} должен хранить пустую ссылку (null)
     *
     * @return контейнер, который может содержать максимальное значение дерева.
     */
    Optional<T> max();

    /**
     * Извлекает значения дерева в виде списка.
     *
     * @param order порядок обхода.
     * @return список значение в порядке обхода.
     * @see Traversal
     */
    List<T> traverse(Traversal order);

    /**
     * Проверка, является ли дерево пустым.
     *
     * @return результат проверки
     */
    boolean isEmpty();

}
